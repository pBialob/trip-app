/* eslint-disable jsx-a11y/alt-text */
/* eslint-disable @next/next/no-img-element */
/* eslint-disable @typescript-eslint/consistent-type-imports */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
import { Hastag, Photo, Trip, User } from "@prisma/client";
import { useQuery } from "@tanstack/react-query";
import classNames from "classnames";
import { type NextPage } from "next";
import { SessionProvider, signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useEffect } from "react";

const getTrips = async () => {
  try {
    const res = await fetch("/api/trips/list");
    if (!res.ok) {
      throw new Error(`HTTP error! status: ${res.status}`);
    }
    const data = await res.json(); // Use res.json() to parse JSON response
    console.log(data, "data", data.body);
    return data as Array<
      Trip & { user: User; photos: Photo[]; hashtags: Hastag[] }
    >;
  } catch (error) {
    console.error("Fetch failed:", error);
    // Handle error appropriately in your app
    return [];
  }
};

const Home: NextPage = () => {
  const { data: sessionData } = useSession();
  const { data: trips, isSuccess, isLoading } = useQuery(["trips"], getTrips);

  return (
    <SessionProvider>
      <main>
        <Head>
          <title>Trip App</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <header className="border-base-border fixed left-0 top-0 z-10 w-full border-b bg-white">
          <nav className="flex h-[var(--navigation-height)] w-full">
            <div className="mx-4 flex h-full w-full  items-center justify-between">
              <div className="flex text-2xl">
                <Link href="/">
                  <div className="text-2xl font-bold text-black no-underline">
                    Trip App
                  </div>
                </Link>
                {sessionData?.user && (
                  <>
                    <Link href="/trips/my">
                      <div className="ml-12 text-black no-underline">
                        My Trips
                      </div>
                    </Link>
                    <Link href="/trips/new">
                      <div className="ml-12 text-black no-underline">
                        New Trip
                      </div>
                    </Link>
                  </>
                )}
              </div>
              <AuthShowcase />
            </div>
          </nav>
        </header>
        <div className="mx-auto min-h-[calc(100vh_-_var(--navigation-height))] w-full max-w-fit bg-white  px-12 pt-[var(--navigation-height)]">
          <div className="grid grid-cols-12 flex-col  gap-10 divide-y">
            {isLoading && <div>Loading...</div>}
            {isSuccess &&
              trips.map((trip, index) => (
                <div
                  key={trip.id}
                  className={classNames(
                    "card",
                    index % 3 === 0 && "col-start-1 col-end-4",
                    index % 3 === 1 && "col-start-4 col-end-10",
                    index % 3 === 2 && "col-start-10 col-end-13"
                  )}
                >
                  <article className="flex flex-col gap-2">
                    <img src={trip.photos[0]?.url} />
                    <div className="p-2">
                      <Link href={`/trips/${trip.id}`}>
                        <h2 className="my-2 text-2xl font-bold">
                          {trip.title}
                        </h2>
                      </Link>
                      <p className="truncate">{trip.description}</p>
                      <span className="text-xl text-gray-300">
                        {trip.hashtags.map((hashtag) => (
                          <span key={hashtag.id}>#{hashtag.name} </span>
                        ))}
                      </span>
                    </div>
                  </article>
                </div>
              ))}
          </div>
        </div>
      </main>
    </SessionProvider>
  );
};

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  return (
    <div className="flex items-center gap-4">
      <p className="text-center text-2xl text-black">
        {sessionData && <span>Zalogowany jako {sessionData.user?.name}</span>}
      </p>
      <button
        className="rounded bg-black px-10 py-3 font-semibold text-white no-underline transition hover:bg-black/80"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

export default Home;
